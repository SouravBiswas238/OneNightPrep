import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Send, FileText, MoreVertical, Trash, Download, ArrowLeft } from 'lucide-react';
import Button from '../../components/ui/Button';
import { pdfAPI } from '../../lib/api';
import { PDFDocument, PDFQuestion } from '../../lib/types';
import { formatDate, formatFileSize } from '../../lib/utils';

const PDFViewer = () => {
  const { fileId } = useParams<{ fileId: string }>();
  const navigate = useNavigate();
  
  const [pdfDocument, setPdfDocument] = useState<PDFDocument | null>(null);
  const [questions, setQuestions] = useState<PDFQuestion[]>([]);
  const [question, setQuestion] = useState('');
  const [loading, setLoading] = useState(true);
  const [asking, setAsking] = useState(false);
  const [showOptions, setShowOptions] = useState(false);
  
  // Fetch PDF document and questions
  useEffect(() => {
    const fetchPDFData = async () => {
      if (!fileId) return;
      
      try {
        setLoading(true);
        
        // Mock API calls - replace with actual API implementation
        const mockPDFResponse = {
          id: fileId,
          name: 'Sample Document.pdf',
          size: 1024 * 1024 * 2.5, // 2.5 MB
          uploadedAt: new Date().toISOString(),
          url: 'https://example.com/sample.pdf',
        };
        
        setPdfDocument(mockPDFResponse);
        
        // Mock questions
        const mockQuestions: PDFQuestion[] = [
          {
            id: '1',
            question: 'What are the main topics covered in this document?',
            answer: 'The main topics covered in this document include climate change, renewable energy sources, and sustainable development practices in urban environments.',
            documentId: fileId,
            createdAt: new Date(Date.now() - 3600000).toISOString(), // 1 hour ago
          },
          {
            id: '2',
            question: 'Summarize the key findings.',
            answer: 'The key findings suggest that implementing renewable energy solutions in urban environments can reduce carbon emissions by up to 40% within a decade. The document emphasizes the importance of policy changes, infrastructure development, and community engagement to achieve sustainable development goals.',
            documentId: fileId,
            createdAt: new Date(Date.now() - 7200000).toISOString(), // 2 hours ago
          },
        ];
        
        setQuestions(mockQuestions);
      } catch (error) {
        console.error('Error fetching PDF data:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchPDFData();
  }, [fileId]);

  // Ask a question about the PDF
  const askQuestion = async () => {
    if (!question.trim() || !fileId) return;
    
    try {
      setAsking(true);
      
      // Mock API call - replace with actual implementation
      setTimeout(() => {
        const newQuestion: PDFQuestion = {
          id: Date.now().toString(),
          question: question,
          answer: `This is a simulated answer to your question: "${question}". In a real implementation, this would be generated by analyzing the content of the PDF document using AI.`,
          documentId: fileId,
          createdAt: new Date().toISOString(),
        };
        
        setQuestions([newQuestion, ...questions]);
        setQuestion('');
        setAsking(false);
      }, 2000);
      
    } catch (error) {
      console.error('Error asking question:', error);
      setAsking(false);
    }
  };

  // Handle input keypress
  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      askQuestion();
    }
  };

  // Delete PDF document
  const deletePDF = async () => {
    if (!fileId) return;
    
    if (window.confirm('Are you sure you want to delete this document? This action cannot be undone.')) {
      try {
        await pdfAPI.deletePDF(fileId);
        navigate('/dashboard');
      } catch (error) {
        console.error('Error deleting PDF:', error);
      }
    }
  };

  // Handle document download
  const downloadPDF = () => {
    if (!pdfDocument) return;
    
    // In a real implementation, you would use the document URL
    // For this mock, we're showing the concept
    alert('In a real implementation, this would download the PDF document.');
  };

  return (
    <div className="flex flex-col h-screen">
      {/* Header */}
      <div className="border-b border-border p-4 flex items-center justify-between bg-card">
        <div className="flex items-center">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => navigate('/dashboard')}
            className="mr-2 md:hidden"
          >
            <ArrowLeft className="h-5 w-5" />
          </Button>
          
          <div className="flex items-center">
            <div className="p-2 bg-accent/10 rounded-full mr-3">
              <FileText className="h-5 w-5 text-accent" />
            </div>
            <div>
              <h1 className="text-lg font-medium truncate max-w-[200px] sm:max-w-md">
                {pdfDocument?.name || 'Loading document...'}
              </h1>
              {pdfDocument && (
                <p className="text-xs text-muted-foreground">
                  {formatFileSize(pdfDocument.size)} Â· Uploaded {formatDate(pdfDocument.uploadedAt)}
                </p>
              )}
            </div>
          </div>
        </div>
        
        <div className="relative">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setShowOptions(!showOptions)}
          >
            <MoreVertical className="h-5 w-5" />
          </Button>
          
          {showOptions && (
            <div className="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-card border border-border z-10">
              <div className="py-1">
                <button
                  className="flex w-full items-center px-4 py-2 text-sm hover:bg-accent/10"
                  onClick={() => {
                    downloadPDF();
                    setShowOptions(false);
                  }}
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download PDF
                </button>
                <button
                  className="flex w-full items-center px-4 py-2 text-sm text-destructive hover:bg-destructive/10"
                  onClick={() => {
                    deletePDF();
                    setShowOptions(false);
                  }}
                >
                  <Trash className="h-4 w-4 mr-2" />
                  Delete Document
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Split view: PDF viewer and Q&A */}
      <div className="flex flex-col md:flex-row flex-1 overflow-hidden">
        {/* PDF viewer (left side) */}
        <div className="w-full md:w-1/2 h-1/2 md:h-full border-b md:border-b-0 md:border-r border-border overflow-y-auto">
          <div className="h-full flex flex-col items-center justify-center p-4 text-center">
            <div className="p-6 bg-accent/10 rounded-full mb-6">
              <FileText className="h-12 w-12 text-accent" />
            </div>
            <h2 className="text-xl font-bold mb-2">PDF Viewer</h2>
            <p className="text-muted-foreground mb-4">
              In a complete implementation, the PDF would be displayed here using a PDF viewer component.
            </p>
            <Button 
              variant="outline"
              onClick={downloadPDF}
              iconLeft={<Download className="h-4 w-4 mr-2" />}
            >
              Download PDF
            </Button>
          </div>
        </div>
        
        {/* Q&A section (right side) */}
        <div className="w-full md:w-1/2 h-1/2 md:h-full flex flex-col">
          {/* Question input */}
          <div className="border-b border-border p-4 bg-card">
            <h2 className="text-lg font-medium mb-2">Ask about this document</h2>
            <div className="flex">
              <input
                type="text"
                value={question}
                onChange={(e) => setQuestion(e.target.value)}
                onKeyDown={handleKeyPress}
                placeholder="Ask a question about the document..."
                className="flex-1 rounded-l-md border border-r-0 border-input bg-background px-3 py-2 text-sm focus:outline-none focus:ring-1 focus:ring-ring"
                disabled={asking}
              />
              <Button
                className="rounded-l-none"
                disabled={!question.trim() || asking}
                onClick={askQuestion}
              >
                {asking ? (
                  <div className="flex items-center">
                    <svg className="animate-spin h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Processing
                  </div>
                ) : (
                  <>
                    <Send className="h-4 w-4 mr-2" />
                    Ask
                  </>
                )}
              </Button>
            </div>
          </div>
          
          {/* Questions and answers */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {loading ? (
              Array(2).fill(0).map((_, i) => (
                <div key={i} className="animate-pulse">
                  <div className="h-4 bg-muted rounded w-1/4 mb-2"></div>
                  <div className="h-20 bg-muted rounded w-full mb-1"></div>
                  <div className="h-3 bg-muted rounded w-1/6"></div>
                </div>
              ))
            ) : questions.length === 0 ? (
              <div className="flex flex-col items-center justify-center h-full text-center">
                <p className="text-muted-foreground">
                  No questions asked yet. Ask a question to get insights from the document.
                </p>
              </div>
            ) : (
              questions.map((q) => (
                <div key={q.id} className="border border-border rounded-lg p-4">
                  <div className="font-medium mb-2">{q.question}</div>
                  <div className="text-sm mb-2">{q.answer}</div>
                  <div className="text-xs text-muted-foreground">
                    {formatDate(q.createdAt)}
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PDFViewer;